{"general_info":{"course_id":"ΗΥ-352","course_title":"ΤΕΧΝΟΛΟΓΙΑ ΛΟΓΙΣΜΙΚΟΥ","instructor":"ΑΝΤΩΝΙΟΣ ΣΑΒΒΙΔΗΣ","teaching_semester":"ΧΕΙΜΕΡΙΝΟ","school":"ΘΕΤΙΚΩΝ ΚΑΙ ΤΕΧΝΟΛΟΓΙΚΩΝ ΕΠΙΣΤΗΜΩΝ","department":"ΕΠΙΣΤΗΜΗΣ ΥΠΟΛΟΓΙΣΤΩΝ","study_level":"ΠΡΟΠΤΥΧΙΑΚΟ","semester_of_studies":"5o-8o","autonomous_teaching_activities":{"activity_type":"Διαλέξεις και φροντιστήρια","weekly_teaching_hours":6,"ects_credits":6},"course_type":"Επιστημονικής Περιοχής Ε5","prerequisite_courses":["HY-252"],"language_of_instruction_and_exams":"Ελληνική. Ενδέχεται να γίνεται και στην Αγγλική εάν υπάρχει ενδιαφέρον από αγγλόφωνο ακροατήριο.","offered_to_erasmus_students":"ΝΑΙ","course_website":"http://www.csd.uoc.gr/~hy352"},"course_objectives":{"learning_outcomes_text":"Οι φοιτητές θα γνωρίζουν τις κύριες κατασκευαστικές μεθόδους, διαδικασίες και τεχνικές για την μετάβαση από τη μικροσκοπική κλίμακα του προγράμματος στη μακροσκοπική κλίμακα των συστημάτων.\n\nΣτόχοι Μαθήματος\nΒασικός σκοπός του μαθήματος είναι η παρουσίαση και ανάλυση των στρατηγικών και μεθόδων σχεδίασης και ανάπτυξης λογισμικού (software engineering), ώστε εκτός από την απλή ικανοποίηση των εκάστοτε λειτουργικών προδιαγραφών (functional specifications), να εξασφαλίζεται ελαχιστοποίηση λαθών και εύκολος εντοπισμός τους (error proneness, robustness, defect detection), επεκτασιμότητα (extensibility), εύκολη και ασφαλής τροποποίηση (effective and efficient modification support), επαναχρησιμοποίηση (reusability), δυνατότητα μεταφοράς σε άλλες πλατφόρμες (portability), ελαχιστοποίηση μεγέθους υλοποίησης (code reduction) καθώς επίσης και απλότητα και αυτο-τεκμηρίωση (simplicity and self-documentation). Οι ιδιότητες αυτές, οι οποίες στο σύνολο τους αποτελούν μέτρο ποιότητας λογισμικού (software quality), θα μελετηθούν κυρίως στο επίπεδο κατασκευής μεγάλων συστημάτων λογισμικού (large-scale software development), όπου εμπλέκονται αφενός αρκετοί δημιουργοί λογισμικού (software developers) και αφετέρου πολλαπλές τεχνολογίες υλοποίησης (implementation technologies). Η μεγαλύτερη έμφαση θα δοθεί στον ρόλο της αρχιτεκτονικής (software architecture), των σχεδιαστικών προτύπων (software design patterns), των στοιχείων της οντοκεντρικής σχεδίασης και προγραμματισμού (object-oriented design and programming), και του αμυντικού προγραμματισμού (defensive programming), με παρουσίαση των πιο προηγμένων και εξελιγμένων τεχνικών που εφαρμόζονται σήμερα στα μεγάλα συστήματα λογισμικού, όπως ακραίος προγραμματισμός (extreme programming).","general_competencies":["Αναζήτηση, ανάλυση και σύνθεση δεδομένων και πληροφοριών, με τη χρήση και των απαραίτητων τεχνολογιών","Προσαρμογή σε νέες καταστάσεις","Λήψη αποφάσεων","Αυτόνομη εργασία","Ομαδική εργασία","Εργασία σε διεθνές περιβάλλον","Παραγωγή νέων ερευνητικών ιδεών","Σχεδιασμός και διαχείριση έργων","Άσκηση κριτικής και αυτοκριτικής","Προαγωγή της ελεύθερης, δημιουργικής και επαγωγικής σκέψης"]}}
